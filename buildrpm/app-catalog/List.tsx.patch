diff --git app-catalog/src/components/charts/List.tsx app-catalog/src/components/charts/List.tsx
index 619cc31..bc98381 100644
--- app-catalog/src/components/charts/List.tsx
+++ app-catalog/src/components/charts/List.tsx
@@ -19,12 +19,31 @@ import {
 import { Autocomplete, Pagination } from '@mui/material';
 import { useEffect, useState } from 'react';
 //import { jsonToYAML, yamlToJSON } from '../../helpers';
-import { fetchChartsFromArtifact } from '../../api/charts';
+import {fetchChartIcon, fetchChartsFromArtifact} from '../../api/charts';
+import { AvailableComponentVersions } from '../../helpers/catalog';
 //import { createRelease } from '../../api/releases';
 import { EditorDialog } from './EditorDialog';
-
+import * as global from "global";
 export const PAGE_OFFSET_COUNT_FOR_CHARTS = 9;
 
+export const VANILLA_HELM_REPO = 'VANILLA_HELM_REPOSITORY';
+
+export const COMMUNITY_REPO = 'COMMUNITY_REPOSITORY';
+
+// Replace the token with the URL prefix to values.yaml for a component on ${CUSTOM_CHART_VALUES_PREFIX}/${packageID}/${packageVersion}/values.yaml
+// This is used only for the catalog provided by a vanilla Helm repository.
+// For the default behavior when this token is not replaced during deployment, please take a look at the global variable CHART_VALUES_PREFIX and its
+// usage in src/api/catalogs.tsx
+export const CUSTOM_CHART_VALUES_PREFIX = 'CUSTOM_CHART_VALUES_PREFIX';
+
+// The name of the helm repository added before installing an application, while using vanilla helm repository
+export const APP_CATALOG_HELM_REPOSITORY = 'app-catalog';
+
+// Define a global variable to hold the available versions of the components in the catalog
+declare global {
+  var AVAILABLE_VERSIONS: Map<any, any[]>;
+}
+
 export function ChartsList({ fetchCharts = fetchChartsFromArtifact }) {
   const helmChartCategoryList = [
     { title: 'All', value: 0 },
@@ -44,11 +63,18 @@ export function ChartsList({ fetchCharts = fetchChartsFromArtifact }) {
   const [chartCategory, setChartCategory] = useState(helmChartCategoryList[0]);
   const [search, setSearch] = useState('');
   const [selectedChartForInstall, setSelectedChartForInstall] = useState<any | null>(null);
+  const [iconUrls, setIconUrls] = useState<{ [url: string]: string }>({}); // New state for multiple icon URLs
 
   useEffect(() => {
     setCharts(null);
     fetchCharts(search, chartCategory, page).then(response => {
-      setCharts(response.packages);
+      if (global.CHART_PROFILE === VANILLA_HELM_REPO) {
+        setCharts(response.entries);
+        // Capture available versions from the response and set AVAILABLE_VERSIONS
+        globalThis.AVAILABLE_VERSIONS = AvailableComponentVersions(response.entries);
+      } else {
+        setCharts(response.packages);
+      }
       const facets = response.facets;
       const categoryOptions = facets.find(
         (facet: {
@@ -81,6 +107,69 @@ export function ChartsList({ fetchCharts = fetchChartsFromArtifact }) {
   }, [page, chartCategory, search]);
 
   useEffect(() => {
+        if (charts && Object.keys(charts).length > 0) {
+            const fetchIcons = async () => {
+                try {
+                    const iconUrls = {};
+                    const iconPromises = Object.values(charts).flatMap(chartArray =>
+                        chartArray.map(async chart => {
+                            const iconURL = chart.icon ?? '';
+                                if (iconURL === '') {
+                                    return;
+                                }
+                                const isURL = (urlString) => {
+                                    try {
+                                        new URL(urlString);
+                                        return true;
+                                    } catch (e) {
+                                        return false;
+                                    }
+                                };
+                                if (isURL(iconURL)) {
+                                    // may be an external icon URL, so, just use as is
+                                    iconUrls[iconURL] = iconURL
+                                } else {
+                                    const p = await fetchChartIcon(iconURL)
+                                        .then((response: any) =>  {
+                                            const contentType = response.headers.get('Content-Type');
+                                            if (contentType.includes('image/svg+xml') || contentType.includes('text/xml') || contentType.includes('text/plain')) {
+                                                response.text()
+                                                    .then((txt) =>
+                                                        new Promise((resolve, reject) => {
+                                                            const reader = new FileReader();
+                                                            reader.onloadend = () => reader.result
+                                                            reader.onerror = reject;
+                                                            iconUrls[iconURL] = `data:image/svg+xml;utf8,${encodeURIComponent(txt)}`;
+                                                        })
+                                                    );
+                                            } else if (contentType.includes('image/')) {
+                                                response.blob()
+                                                    .then((blob) =>
+                                                        new Promise((resolve, reject) => {
+                                                            const reader = new FileReader();
+                                                            reader.onloadend = () => reader.result
+                                                            reader.onerror = reject;
+                                                            reader.readAsDataURL(blob);
+                                                            iconUrls[iconURL] = URL.createObjectURL(blob);
+                                                        })
+                                                    );
+                                            }
+                                        })
+                                        .catch(error => console.error("failed to fetch icon:", error))
+                                }
+                        })
+                    );
+                     await Promise.all(iconPromises);
+                    setIconUrls(iconUrls);
+                } catch (error) {
+                    console.error("Error fetching icons:", error);
+                }
+            };
+            fetchIcons();
+        }
+    }, [charts]);
+
+    useEffect(() => {
     setPage(1);
   }, [chartCategory, search]);
 
@@ -138,150 +227,322 @@ export function ChartsList({ fetchCharts = fetchChartsFromArtifact }) {
     );
   }
 
-  return (
-    <>
-      <EditorDialog
-        openEditor={openEditor}
-        chart={selectedChartForInstall}
-        handleEditor={(open: boolean) => setEditorOpen(open)}
-      />
-      <SectionHeader title="Applications" actions={[<Search />, <CategoryForCharts />]} />
-      <Box display="flex" flexWrap="wrap" justifyContent="space-between" alignContent="start">
-        {!charts ? (
-          <Box
-            style={{
-              margin: '0 auto',
-            }}
-          >
-            <Loader title="" />
-          </Box>
-        ) : charts.length === 0 ? (
-          <Box mt={2} mx={2}>
-            <Typography variant="h5" component="h2">
-              {`No charts found for ${
-                search ? `search term: ${search}` : `category: ${chartCategory.title}`
-              }`}
-            </Typography>
-          </Box>
-        ) : (
-          charts.map(chart => {
-            return (
-              <Box maxWidth="30%" width="400px" m={1}>
-                <Card>
-                  <Box height="60px" display="flex" alignItems="center" marginTop="15px">
-                    <CardMedia
-                      image={`https://artifacthub.io/image/${chart.logo_image_id}`}
-                      style={{
-                        width: '60px',
-                        margin: '1rem',
-                      }}
-                      component="img"
-                    />
+  if (global.CHART_PROFILE === VANILLA_HELM_REPO) {
+    return (
+      <>
+        <EditorDialog
+          openEditor={openEditor}
+          chart={selectedChartForInstall}
+          handleEditor={(open: boolean) => setEditorOpen(open)}
+        />
+        {/* Removed the drop-down for categories */}
+        <SectionHeader title="Applications" actions={[<Search />]} />
+        <Box display="flex" flexWrap="wrap"  justifyContent="space-between" alignContent="start">
+          {!charts ? (
+            <Box
+              style={{
+                margin: '0 auto',
+              }}
+            >
+              <Loader title="" />
+            </Box>
+          ) : charts.length === 0 ? (
+            <Box mt={2} mx={2}>
+              <Typography variant="h5" component="h2">
+                {`No charts found for ${
+                  search ? `search term: ${search}` : `category: ${chartCategory.title}`
+                }`}
+              </Typography>
+            </Box>
+          ) : (
+            // Filter out the charts meeting the value entered for search field and display only the matching charts
+            Object.keys(
+              Object.keys(charts)
+                .filter(key => key.match(search))
+                .reduce((obj, key) => {
+                  return Object.assign(obj, {
+                    [key]: charts[key],
+                  });
+                }, {})
+            ).map(chartName => {
+              // When a chart contains multiple versions, only display the first version
+              return charts[chartName].slice(0, 1).map(chart => {
+                return (
+                  // TODO: There is some alignment problem where last row has an empty middle box
+                  <Box  maxWidth="30%" width="400px" m={1}>
+                    <Card key={chart.icon}>
+                      <Box height="60px" display="flex" alignItems="center" marginTop="15px">
+                        {/* Do not display icon, when it is not specified */}
+
+                              <CardMedia
+                                  image={iconUrls[chart.icon] || ''}
+                                  style={{
+                                      width: '60px',
+                                      margin: '1rem',
+                                  }}
+                                  component="img"
+                              />
+                      </Box>
+                      <CardContent
+                        style={{
+                          margin: '1rem 0rem',
+                          height: '15vh',
+                          overflow: 'hidden',
+                          paddingTop: 0,
+                        }}
+                      >
+                        <Box
+                          style={{
+                            overflow: 'hidden',
+                            textOverflow: 'ellipsis',
+                            whiteSpace: 'nowrap',
+                          }}
+                        >
+                          <Tooltip title={chart.name}>
+                            <Typography component="h5" variant="h5">
+                              {/* TODO: The app-catalog using artifacthub.io loads the details about the chart with an option to install the chart
+                                        Fix this for vanilla helm repo */}
+                              {chart.name}
+                            </Typography>
+                          </Tooltip>
+                        </Box>
+                        <Box display="flex" justifyContent="space-between" my={1}>
+                          {/* If the chart.version contains v prefix, remove it */}
+                          {chart.version.startsWith('v') ? (
+                            <Typography>{chart.version}</Typography>
+                          ) : (
+                            <Typography>v{chart.version}</Typography>
+                          )}
+                          <Box
+                            marginLeft={1}
+                            style={{
+                              overflow: 'hidden',
+                              textOverflow: 'ellipsis',
+                              whiteSpace: 'nowrap',
+                            }}
+                          >
+                            {/* Repository name is not mandatory */}
+                            <Tooltip title={chart?.repository?.name || ''}>
+                              <span>{chart?.repository?.name || ''}</span>
+                            </Tooltip>
+                          </Box>
+                        </Box>
+                        <Divider />
+                        <Box mt={1}>
+                          <Typography>
+                            {chart?.description?.slice(0, 100)}
+                            {chart?.description?.length > 100 && (
+                              <Tooltip title={chart?.description}>
+                                <span>…</span>
+                              </Tooltip>
+                            )}
+                          </Typography>
+                        </Box>
+                      </CardContent>
+                      <CardActions
+                        style={{
+                          justifyContent: 'space-between',
+                          padding: '14px',
+                        }}
+                      >
+                        <Button
+                          style={{
+                            backgroundColor: '#000',
+                            color: 'white',
+                            textTransform: 'none',
+                          }}
+                          onClick={() => {
+                            setSelectedChartForInstall(chart);
+                            setEditorOpen(true);
+                          }}
+                        >
+                          Install
+                        </Button>
+                        {/*
+                            Provide Learn More link only when the chart has source
+                            When there are multiple sources for a chart, use the first source for the link, rather than using comma separated values
+                          */}
+                        {!chart?.sources ? (
+                          ''
+                        ) : chart.sources.length === 1 ? (
+                          <Link href={chart?.sources} target="_blank">
+                            Learn More
+                          </Link>
+                        ) : (
+                          <Link href={chart?.sources[0]} target="_blank">
+                            Learn More
+                          </Link>
+                        )}
+                      </CardActions>
+                    </Card>
                   </Box>
-                  <CardContent
-                    style={{
-                      margin: '1rem 0rem',
-                      height: '25vh',
-                      overflow: 'hidden',
-                      paddingTop: 0,
-                    }}
-                  >
-                    <Box
+                );
+              });
+            })
+          )}
+        </Box>
+        {charts && charts.length !== 0 && (
+          <Box mt={2} mx="auto" maxWidth="max-content">
+            <Pagination
+              size="large"
+              shape="rounded"
+              page={page}
+              count={Math.floor(chartsTotalCount / PAGE_OFFSET_COUNT_FOR_CHARTS)}
+              color="primary"
+              onChange={(e, page: number) => {
+                setPage(page);
+              }}
+            />
+          </Box>
+        )}
+      </>
+    );
+  } else {
+    return (
+      <>
+        <EditorDialog
+          openEditor={openEditor}
+          chart={selectedChartForInstall}
+          handleEditor={(open: boolean) => setEditorOpen(open)}
+        />
+        <SectionHeader title="Applications" actions={[<Search />, <CategoryForCharts />]} />
+        <Box display="flex" flexWrap="wrap" justifyContent="space-between" alignContent="start">
+          {!charts ? (
+            <Box
+              style={{
+                margin: '0 auto',
+              }}
+            >
+              <Loader title="" />
+            </Box>
+          ) : charts.length === 0 ? (
+            <Box mt={2} mx={2}>
+              <Typography variant="h5" component="h2">
+                {`No charts found for ${
+                  search ? `search term: ${search}` : `category: ${chartCategory.title}`
+                }`}
+              </Typography>
+            </Box>
+          ) : (
+            charts.map(chart => {
+              return (
+                <Box maxWidth="30%" width="400px" m={1}>
+                  <Card>
+                    <Box height="60px" display="flex" alignItems="center" marginTop="15px">
+                      <CardMedia
+                        image={`https://artifacthub.io/image/${chart.logo_image_id}`}
+                        style={{
+                          width: '60px',
+                          margin: '1rem',
+                        }}
+                        component="img"
+                      />
+                    </Box>
+                    <CardContent
                       style={{
+                        margin: '1rem 0rem',
+                        height: '25vh',
                         overflow: 'hidden',
-                        textOverflow: 'ellipsis',
-                        whiteSpace: 'nowrap',
+                        paddingTop: 0,
                       }}
                     >
-                      <Tooltip title={chart.name}>
-                        <Typography component="h5" variant="h5">
-                          <RouterLink
-                            routeName="/helm/:repoName/charts/:chartName"
-                            params={{
-                              chartName: chart.name,
-                              repoName: chart.repository.name,
-                            }}
-                          >
-                            {chart.name}
-                          </RouterLink>
-                        </Typography>
-                      </Tooltip>
-                    </Box>
-                    <Box display="flex" justifyContent="space-between" my={1}>
-                      <Typography>v{chart.version}</Typography>
                       <Box
-                        marginLeft={1}
                         style={{
                           overflow: 'hidden',
                           textOverflow: 'ellipsis',
                           whiteSpace: 'nowrap',
                         }}
                       >
-                        <Tooltip title={chart?.repository?.name || ''}>
-                          <span>{chart?.repository?.name || ''}</span>
+                        <Tooltip title={chart.name}>
+                          <Typography component="h5" variant="h5">
+                            <RouterLink
+                              routeName="/helm/:repoName/charts/:chartName"
+                              params={{
+                                chartName: chart.name,
+                                repoName: chart.repository.name,
+                              }}
+                            >
+                              {chart.name}
+                            </RouterLink>
+                          </Typography>
                         </Tooltip>
                       </Box>
-                    </Box>
-                    <Divider />
-                    <Box mt={1}>
-                      <Typography>
-                        {chart?.description?.slice(0, 100)}
-                        {chart?.description?.length > 100 && (
-                          <Tooltip title={chart?.description}>
-                            <span>…</span>
+                      <Box display="flex" justifyContent="space-between" my={1}>
+                        <Typography>v{chart.version}</Typography>
+                        <Box
+                          marginLeft={1}
+                          style={{
+                            overflow: 'hidden',
+                            textOverflow: 'ellipsis',
+                            whiteSpace: 'nowrap',
+                          }}
+                        >
+                          <Tooltip title={chart?.repository?.name || ''}>
+                            <span>{chart?.repository?.name || ''}</span>
                           </Tooltip>
-                        )}
-                      </Typography>
-                    </Box>
-                  </CardContent>
-                  <CardActions
-                    style={{
-                      justifyContent: 'space-between',
-                      padding: '14px',
-                    }}
-                  >
-                    <Button
+                        </Box>
+                      </Box>
+                      <Divider />
+                      <Box mt={1}>
+                        <Typography>
+                          {chart?.description?.slice(0, 100)}
+                          {chart?.description?.length > 100 && (
+                            <Tooltip title={chart?.description}>
+                              <span>…</span>
+                            </Tooltip>
+                          )}
+                        </Typography>
+                      </Box>
+                    </CardContent>
+                    <CardActions
                       style={{
-                        backgroundColor: '#000',
-                        color: 'white',
-                        textTransform: 'none',
-                      }}
-                      onClick={() => {
-                        setSelectedChartForInstall(chart);
-                        setEditorOpen(true);
+                        justifyContent: 'space-between',
+                        padding: '14px',
                       }}
                     >
-                      Install
-                    </Button>
-                    <Link href={chart?.repository?.url} target="_blank">
-                      Learn More
-                    </Link>
-                  </CardActions>
-                </Card>
-              </Box>
-            );
-          })
+                      <Button
+                        style={{
+                          backgroundColor: '#000',
+                          color: 'white',
+                          textTransform: 'none',
+                        }}
+                        onClick={() => {
+                          setSelectedChartForInstall(chart);
+                          setEditorOpen(true);
+                        }}
+                      >
+                        Install
+                      </Button>
+                      <Link href={chart?.repository?.url} target="_blank">
+                        Learn More
+                      </Link>
+                    </CardActions>
+                  </Card>
+                </Box>
+              );
+            })
+          )}
+        </Box>
+        {charts && charts.length !== 0 && (
+          <Box mt={2} mx="auto" maxWidth="max-content">
+            <Pagination
+              size="large"
+              shape="rounded"
+              page={page}
+              count={Math.floor(chartsTotalCount / PAGE_OFFSET_COUNT_FOR_CHARTS)}
+              color="primary"
+              onChange={(e, page: number) => {
+                setPage(page);
+              }}
+            />
+          </Box>
         )}
-      </Box>
-      {charts && charts.length !== 0 && (
-        <Box mt={2} mx="auto" maxWidth="max-content">
-          <Pagination
-            size="large"
-            shape="rounded"
-            page={page}
-            count={Math.floor(chartsTotalCount / PAGE_OFFSET_COUNT_FOR_CHARTS)}
-            color="primary"
-            onChange={(e, page: number) => {
-              setPage(page);
-            }}
-          />
+        <Box textAlign="right">
+          <Link href="https://artifacthub.io/" target="_blank">
+            Powered by ArtifactHub
+          </Link>
         </Box>
-      )}
-      <Box textAlign="right">
-        <Link href="https://artifacthub.io/" target="_blank">
-          Powered by ArtifactHub
-        </Link>
-      </Box>
-    </>
-  );
+      </>
+    );
+  }
 }
