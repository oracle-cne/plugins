diff --git app-catalog/src/api/charts.tsx app-catalog/src/api/charts.tsx
index 171cef3..3ab9d9e 100644
--- app-catalog/src/api/charts.tsx
+++ app-catalog/src/api/charts.tsx
@@ -1,4 +1,18 @@
-import { PAGE_OFFSET_COUNT_FOR_CHARTS } from '../components/charts/List';
+import { request } from '@kinvolk/headlamp-plugin/lib/ApiProxy';
+import {
+  COMMUNITY_REPO,
+  CUSTOM_CHART_VALUES_PREFIX,
+  PAGE_OFFSET_COUNT_FOR_CHARTS,
+  VANILLA_HELM_REPO,
+} from '../components/charts/List';
+import { yamlToJSON } from '../helpers';
+import { isElectron } from '../index';
+
+const SERVICE_PROXY = '/serviceproxy';
+
+const getURLSearchParams = url => {
+  return new URLSearchParams({ request: url }).toString();
+};
 
 export function fetchChartsFromArtifact(
   search: string = '',
@@ -6,6 +20,39 @@ export function fetchChartsFromArtifact(
   page: number,
   limit: number = PAGE_OFFSET_COUNT_FOR_CHARTS
 ) {
+  if (!isElectron()) {
+    if (CHART_PROFILE === VANILLA_HELM_REPO) {
+      // When CHART_PROFILE is VANILLA_HELM_REPOSITORY, the code expects /charts/index.yaml
+      // to contain the metadata of the available charts
+      const url =
+        `${SERVICE_PROXY}/${CATALOG_NAMESPACE}/${CATALOG_NAME}?` +
+        getURLSearchParams(`charts/index.yaml`);
+
+      // Ensure that the UI renders index.yaml in yaml and json format. Please note that, helm repo index generates index.yaml
+      // in yaml as the default format, although latest versions support generating the file in json format.
+      // The API yamlToJSON works for the response in yaml as well as json format.
+      return request(url, { isJSON: false }, true, true, {})
+        .then(response => response.text())
+        .then(yamlResponse => yamlToJSON(yamlResponse));
+    } else if (CHART_PROFILE === COMMUNITY_REPO) {
+      let requestParam = '';
+      if (!category || category.value === 0) {
+        requestParam = `api/v1/packages/search?kind=0&ts_query_web=${search}&sort=relevance&facets=true&limit=${limit}&offset=${
+          (page - 1) * limit
+        }`;
+      } else {
+        requestParam = `api/v1/packages/search?kind=0&ts_query_web=${search}&category=${
+          category.value
+        }&sort=relevance&facets=true&limit=${limit}&offset=${(page - 1) * limit}`;
+      }
+
+      const url =
+        `${SERVICE_PROXY}/${CATALOG_NAMESPACE}/${CATALOG_NAME}?` + getURLSearchParams(requestParam);
+      return request(url, {}, true, true, {}).then(response => response);
+    }
+  }
+
+  // App-catalog desktop version
   if (!category || category.value === 0) {
     return fetch(
       `https://artifacthub.io/api/v1/packages/search?kind=0&ts_query_web=${search}&sort=relevance&facets=true&limit=${limit}&offset=${
@@ -21,6 +68,15 @@ export function fetchChartsFromArtifact(
 }
 
 export function fetchChartDetailFromArtifact(chartName: string, repoName: string) {
+  // Use /serviceproxy to fetch the resource, by specifying the access token
+  if (!isElectron() && CHART_PROFILE === COMMUNITY_REPO) {
+    const url =
+      `${SERVICE_PROXY}/${CATALOG_NAMESPACE}/${CATALOG_NAME}?` +
+      getURLSearchParams(`api/v1/packages/helm/${repoName}/${chartName}`);
+    return request(url, {}, true, true, {}).then(response => response);
+  }
+
+  // Use /externalproxy for App-catalog desktop version
   return fetch(`http://localhost:4466/externalproxy`, {
     headers: {
       'Forward-To': `https://artifacthub.io/api/v1/packages/helm/${repoName}/${chartName}`,
@@ -29,9 +85,37 @@ export function fetchChartDetailFromArtifact(chartName: string, repoName: string
 }
 
 export function fetchChartValues(packageID: string, packageVersion: string) {
+  if (!isElectron()) {
+    let requestParam = '';
+    if (CHART_PROFILE === VANILLA_HELM_REPO) {
+      // When the token CUSTOM_CHART_VALUES_PREFIX is replaced during the deployment, expect the values.yaml for the specified
+      // package and version accessible on ${CUSTOM_CHART_VALUES_PREFIX}/${packageID}/${packageVersion}/values.yaml
+      if (CUSTOM_CHART_VALUES_PREFIX !== 'CUSTOM_CHART_VALUES_PREFIX') {
+        globalThis.CHART_VALUES_PREFIX = `${CUSTOM_CHART_VALUES_PREFIX}`;
+      }
+      // The code expects /${packageID}/${packageVersion}/values.yaml to return values.yaml for the component
+      // denoted by packageID and a given packageVersion. Please note that, chart.name is used for packageID in this case.
+      requestParam = `${CHART_VALUES_PREFIX}/${packageID}/${packageVersion}/values.yaml`;
+    } else if (CHART_PROFILE === COMMUNITY_REPO) {
+      requestParam = `api/v1/packages/${packageID}/${packageVersion}/values`;
+    }
+    const url =
+      `${SERVICE_PROXY}/${CATALOG_NAMESPACE}/${CATALOG_NAME}?` + getURLSearchParams(requestParam);
+
+    // Use /serviceproxy to fetch the resource, by specifying the access token
+    return request(url, { isJSON: false }, true, true, {}).then(response => response.text());
+  }
+
+  // Use /externalproxy for App-catalog desktop version
   return fetch(`http://localhost:4466/externalproxy`, {
     headers: {
       'Forward-To': `https://artifacthub.io/api/v1/packages/${packageID}/${packageVersion}/values`,
     },
   }).then(response => response.text());
 }
+export async function  fetchChartIcon(iconName: string) {
+  const url =
+      `${SERVICE_PROXY}/${CATALOG_NAMESPACE}/${CATALOG_NAME}?` +
+      getURLSearchParams(`${iconName}`);
+  return request(url, {isJSON: false}, true, true, {}).then(response => response);
+}
\ No newline at end of file
